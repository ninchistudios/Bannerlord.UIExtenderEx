{
  "api/Bannerlord.UIExtenderEx.Attributes.BaseUIExtenderAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.BaseUIExtenderAttribute.html",
    "title": "Class BaseUIExtenderAttribute | UIExtenderEx Documentation",
    "keywords": "Class BaseUIExtenderAttribute Base class for extensions attributes Inheritance Object Attribute BaseUIExtenderAttribute PrefabExtensionAttribute ViewModelMixinAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class BaseUIExtenderAttribute : Attribute, _Attribute"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.DataSourceMethodAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.DataSourceMethodAttribute.html",
    "title": "Class DataSourceMethodAttribute | UIExtenderEx Documentation",
    "keywords": "Class DataSourceMethodAttribute Attribute for mixin methods to be added to view models. Only methods specified by this attribute will actually end up in extended view model Inheritance Object Attribute DataSourceMethodAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public sealed class DataSourceMethodAttribute : Attribute, _Attribute"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Attributes | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.Attributes Classes BaseUIExtenderAttribute Base class for extensions attributes DataSourceMethodAttribute Attribute for mixin methods to be added to view models. Only methods specified by this attribute will actually end up in extended view model PrefabExtensionAttribute Attribute for prefab XML extensions. Extension classes should inherit from one of the IPrefabPatch base classes and should be marked with this attribute ViewModelMixinAttribute"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.PrefabExtensionAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.PrefabExtensionAttribute.html",
    "title": "Class PrefabExtensionAttribute | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionAttribute Attribute for prefab XML extensions. Extension classes should inherit from one of the IPrefabPatch base classes and should be marked with this attribute Inheritance Object Attribute BaseUIExtenderAttribute PrefabExtensionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class PrefabExtensionAttribute : BaseUIExtenderAttribute, _Attribute Constructors PrefabExtensionAttribute(String, String) Constructor Declaration public PrefabExtensionAttribute(string movie, string xpath = null) Parameters String movie Gauntlet Movie name to extend String xpath XPath of the node to operate against (optional) Properties Movie Gauntlet Movie name to extend Declaration public string Movie { get; } Property Value String XPath XPath of the node to operate against (optional) Declaration public string XPath { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.ViewModelMixinAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.ViewModelMixinAttribute.html",
    "title": "Class ViewModelMixinAttribute | UIExtenderEx Documentation",
    "keywords": "Class ViewModelMixinAttribute Inheritance Object Attribute BaseUIExtenderAttribute ViewModelMixinAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Attributes Assembly : Bannerlord.UIExtenderEx.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class ViewModelMixinAttribute : BaseUIExtenderAttribute, _Attribute Constructors ViewModelMixinAttribute() Declaration public ViewModelMixinAttribute() ViewModelMixinAttribute(String) Declaration public ViewModelMixinAttribute(string refreshMethodName) Parameters String refreshMethodName Properties RefreshMethodName Declaration public string RefreshMethodName { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.html": {
    "href": "api/Bannerlord.UIExtenderEx.html",
    "title": "Namespace Bannerlord.UIExtenderEx | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx Classes SubModule UIExtender Client class instance of which should be created for each module using this library"
  },
  "api/Bannerlord.UIExtenderEx.Patches.html": {
    "href": "api/Bannerlord.UIExtenderEx.Patches.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Patches | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.Patches Classes WidgetFactoryPatch Skips type duplicates"
  },
  "api/Bannerlord.UIExtenderEx.Patches.WidgetFactoryPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Patches.WidgetFactoryPatch.html",
    "title": "Class WidgetFactoryPatch | UIExtenderEx Documentation",
    "keywords": "Class WidgetFactoryPatch Skips type duplicates Inheritance Object WidgetFactoryPatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Patches Assembly : Bannerlord.UIExtenderEx.dll Syntax public static class WidgetFactoryPatch Methods Patch(Harmony) Declaration public static void Patch(Harmony harmony) Parameters HarmonyLib.Harmony harmony"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.CustomPatch-1.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.CustomPatch-1.html",
    "title": "Class CustomPatch<T> | UIExtenderEx Documentation",
    "keywords": "Class CustomPatch<T> Custom patch on either whole XmlDocument (if T is XmlDocument) or Xpath specified node (if XmlNode is the generic argument) Inheritance Object CustomPatch<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class CustomPatch<T> : IPrefabPatch where T : XmlNode Type Parameters T Properties Id Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Methods Apply(T) Apply this patch to obj Declaration public abstract void Apply(T obj) Parameters T obj"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.EmbedPrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.EmbedPrefabExtensionInsertPatch.html",
    "title": "Class EmbedPrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "Class EmbedPrefabExtensionInsertPatch Inheritance Object InsertPatch PrefabExtensionInsertPatch EmbedPrefabExtensionInsertPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class EmbedPrefabExtensionInsertPatch : PrefabExtensionInsertPatch, IPrefabPatch Constructors EmbedPrefabExtensionInsertPatch(Assembly, String) Declaration protected EmbedPrefabExtensionInsertPatch(Assembly assembly, string path) Parameters Assembly assembly String path Methods GetPrefabExtension() Declaration public override XmlDocument GetPrefabExtension() Returns XmlDocument Overrides InsertPatch.GetPrefabExtension()"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Prefabs | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.Prefabs Classes CustomPatch<T> Custom patch on either whole XmlDocument (if T is XmlDocument) or Xpath specified node (if XmlNode is the generic argument) EmbedPrefabExtensionInsertPatch InsertPatch Base class for insert patches ModulePrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) Extension snippet should be named as {Name}.xml and located at module's GUI/PrefabExtensions folder. PrefabExtensionInsertAsSiblingPatch Patch that inserts prefab extension as a sibling to node specified by Xpath. Order is controlled by Type property. PrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) PrefabExtensionReplacePatch Patch that replaces node specified by XPath with node from prefab extension Interfaces IPrefabPatch General interface for XML prefab patch Enums PrefabExtensionInsertAsSiblingPatch.InsertType Insert type enum - Prepend inserts snippet before sibling, Append - after"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.InsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.InsertPatch.html",
    "title": "Class InsertPatch | UIExtenderEx Documentation",
    "keywords": "Class InsertPatch Base class for insert patches Inheritance Object InsertPatch PrefabExtensionInsertPatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class InsertPatch : IPrefabPatch Fields PositionFirst Constant that will insert snippet at the very beginning Declaration public const int PositionFirst = 0 Field Value Int32 PositionLast Constant that will insert snippet at the very end Declaration public const int PositionLast = 2147483647 Field Value Int32 Properties Id Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Position Position to insert snippet at Declaration public abstract int Position { get; } Property Value Int32 Methods GetPrefabExtension() Declaration public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.IPrefabPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.IPrefabPatch.html",
    "title": "Interface IPrefabPatch | UIExtenderEx Documentation",
    "keywords": "Interface IPrefabPatch General interface for XML prefab patch Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public interface IPrefabPatch Properties Id Declaration string Id { get; } Property Value String"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.ModulePrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.ModulePrefabExtensionInsertPatch.html",
    "title": "Class ModulePrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "Class ModulePrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) Extension snippet should be named as {Name}.xml and located at module's GUI/PrefabExtensions folder. Inheritance Object InsertPatch PrefabExtensionInsertPatch ModulePrefabExtensionInsertPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class ModulePrefabExtensionInsertPatch : PrefabExtensionInsertPatch, IPrefabPatch Constructors ModulePrefabExtensionInsertPatch(String, String) Declaration protected ModulePrefabExtensionInsertPatch(string name, string moduleName) Parameters String name String moduleName Methods GetPrefabExtension() Declaration public override XmlDocument GetPrefabExtension() Returns XmlDocument Overrides InsertPatch.GetPrefabExtension()"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.html",
    "title": "Class PrefabExtensionInsertAsSiblingPatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertAsSiblingPatch Patch that inserts prefab extension as a sibling to node specified by Xpath. Order is controlled by Type property. Inheritance Object PrefabExtensionInsertAsSiblingPatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionInsertAsSiblingPatch : IPrefabPatch Properties Id Name of the extension snippet, without .xml Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Type Type of the insert Declaration public virtual PrefabExtensionInsertAsSiblingPatch.InsertType Type { get; } Property Value PrefabExtensionInsertAsSiblingPatch.InsertType Methods GetPrefabExtension() Declaration public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.InsertType.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.InsertType.html",
    "title": "Enum PrefabExtensionInsertAsSiblingPatch.InsertType | UIExtenderEx Documentation",
    "keywords": "Enum PrefabExtensionInsertAsSiblingPatch.InsertType Insert type enum - Prepend inserts snippet before sibling, Append - after Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public enum InsertType Append Prepend"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertPatch.html",
    "title": "Class PrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name ) as a child in XPath specified node, at specific position ( Position property) Inheritance Object InsertPatch PrefabExtensionInsertPatch EmbedPrefabExtensionInsertPatch ModulePrefabExtensionInsertPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position InsertPatch.GetPrefabExtension() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionInsertPatch : InsertPatch, IPrefabPatch"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionReplacePatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionReplacePatch.html",
    "title": "Class PrefabExtensionReplacePatch | UIExtenderEx Documentation",
    "keywords": "Class PrefabExtensionReplacePatch Patch that replaces node specified by XPath with node from prefab extension Inheritance Object PrefabExtensionReplacePatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.Prefabs Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class PrefabExtensionReplacePatch : IPrefabPatch Properties Id Name of the extension snippet, without .xml Declaration public abstract string Id { get; } Property Value String Implements IPrefabPatch.Id Methods GetPrefabExtension() Declaration public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.SubModule.html": {
    "href": "api/Bannerlord.UIExtenderEx.SubModule.html",
    "title": "Class SubModule | UIExtenderEx Documentation",
    "keywords": "Class SubModule Inheritance Object MBSubModuleBase SubModule Inherited Members MBSubModuleBase.OnSubModuleLoad() MBSubModuleBase.OnSubModuleUnloaded() MBSubModuleBase.OnBeforeInitialModuleScreenSetAsRoot() MBSubModuleBase.OnGameStart(Game, IGameStarter) MBSubModuleBase.OnApplicationTick(Single) MBSubModuleBase.OnGameLoaded(Game, Object) MBSubModuleBase.OnNewGameCreated(Game, Object) MBSubModuleBase.BeginGameStart(Game) MBSubModuleBase.OnCampaignStart(Game, Object) MBSubModuleBase.OnMultiplayerGameStart(Game, Object) MBSubModuleBase.OnGameInitializationFinished(Game) MBSubModuleBase.DoLoading(Game) MBSubModuleBase.OnGameEnd(Game) MBSubModuleBase.OnMissionBehaviourInitialize(Mission) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx Assembly : Bannerlord.UIExtenderEx.dll Syntax public class SubModule : MBSubModuleBase"
  },
  "api/Bannerlord.UIExtenderEx.UIExtender.html": {
    "href": "api/Bannerlord.UIExtenderEx.UIExtender.html",
    "title": "Class UIExtender | UIExtenderEx Documentation",
    "keywords": "Class UIExtender Client class instance of which should be created for each module using this library Inheritance Object UIExtender Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx Assembly : Bannerlord.UIExtenderEx.dll Syntax public class UIExtender Constructors UIExtender(String) Default constructor. moduleName should match module folder because it will be used to look-up resources Declaration public UIExtender(string moduleName) Parameters String moduleName Module name, should match module folder Methods Disable() Declaration public void Disable() Enable() Declaration public void Enable() Register() Obsolete. Use Register(Assembly) . Declaration [Obsolete(\"Use explicit call Register(Assembly)\", true)] public void Register() Register(Assembly) Register extension types from specified assembly Should be called during OnSubModuleLoad , called by Register Declaration public void Register(Assembly assembly) Parameters Assembly assembly"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.BaseViewModelMixin-1.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.BaseViewModelMixin-1.html",
    "title": "Class BaseViewModelMixin<TViewModel> | UIExtenderEx Documentation",
    "keywords": "Class BaseViewModelMixin<TViewModel> Base class for ViewModelMixin. Generic parameter T will be used to determine which VM to extend. You can use protected _vm to access fields of the original view model. Inheritance Object BaseViewModelMixin<TViewModel> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Bannerlord.UIExtenderEx.ViewModels Assembly : Bannerlord.UIExtenderEx.dll Syntax public abstract class BaseViewModelMixin<TViewModel> : IViewModelMixin where TViewModel : ViewModel Type Parameters TViewModel child of ViewModel this mixin is extending Constructors BaseViewModelMixin(TViewModel) Declaration protected BaseViewModelMixin(TViewModel vm) Parameters TViewModel vm Properties ViewModel Declaration protected TViewModel ViewModel { get; } Property Value TViewModel Methods GetPrivate<TValue>(String) Helper method to get private value from attached view model instance Declaration protected TValue GetPrivate<TValue>(string name) Parameters String name name of the field Returns TValue Type Parameters TValue type OnFinalize() Called when ViewModel's OnFinalized called (supported on models game actually call OnFinalized ). Defaults to empty method. Declaration public virtual void OnFinalize() Implements IViewModelMixin.OnFinalize() OnRefresh() Called when ViewModel is refreshed (specifics are based on ViewModel patch). Defaults to empty method. Declaration public virtual void OnRefresh() Implements IViewModelMixin.OnRefresh() SetPrivate<TValue>(String, TValue) Helper method to set private value of attached view model instance Declaration protected void SetPrivate<TValue>(string name, TValue value) Parameters String name name of the field TValue value new value Type Parameters TValue type"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.html",
    "title": "Namespace Bannerlord.UIExtenderEx.ViewModels | UIExtenderEx Documentation",
    "keywords": "Namespace Bannerlord.UIExtenderEx.ViewModels Classes BaseViewModelMixin<TViewModel> Base class for ViewModelMixin. Generic parameter T will be used to determine which VM to extend. You can use protected _vm to access fields of the original view model. Interfaces IViewModelMixin Interface for ViewModel mixins Should not be used directly, ViewModelMixin should be used as base class"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.IViewModelMixin.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.IViewModelMixin.html",
    "title": "Interface IViewModelMixin | UIExtenderEx Documentation",
    "keywords": "Interface IViewModelMixin Interface for ViewModel mixins Should not be used directly, ViewModelMixin should be used as base class Namespace : Bannerlord.UIExtenderEx.ViewModels Assembly : Bannerlord.UIExtenderEx.dll Syntax public interface IViewModelMixin Methods OnFinalize() Called when ViewModel's OnFinalized called (supported on models game actually call OnFinalized ) Declaration void OnFinalize() OnRefresh() Called when ViewModel is refreshed (specifics are based on ViewModel patch) Declaration void OnRefresh()"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "| UIExtenderEx Documentation",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "Bannerlord.UIExtenderEx | UIExtenderEx Documentation",
    "keywords": "Bannerlord.UIExtenderEx <!-- <a href=\"https://github.com/BUTR/Bannerlord.UIExtenderEx\" alt=\"Logo\"> <img src=\"https://github.com/BUTR/Bannerlord.UIExtenderEx/blob/dev/resources/Butter.png?raw=true\" /></a> </br> --> A library that enables multiple mods to alter standard game interface. Installation This module should be one of the highest in loading order. Ideally, it should be loaded after Bannerlord.Harmony or Bannerlord.ButterLub . For Players This mod is a dependency mod that does not provide anything by itself. You need to additionaly install mods that use it. Quickstart You mark your prefab extensions based on one of the IPrefabPatch descendants and marking it with PrefabExtension attribute, therefore enabling you to make additions to the specified Movie's XML data. Example of inserting XML at a specific position: [PrefabExtension(\"Insert\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children\")] internal class TestPrefabExtensionInsertPatch : PrefabExtensionInsertPatch { public override string Id => \"Insert\"; public override int Position => 3; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"Insert\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of replacing XML : [PrefabExtension(\"Replace\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='Replace']\")] internal class TestPrefabExtensionReplacePatch : PrefabExtensionReplacePatch { public override string Id => \"Replace\"; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionReplacePatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"Replaced\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of inserting XML after a specific element: [PrefabExtension(\"InsertAsSiblingAppend\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='InsertAsSibling']\")] internal class TestPrefabExtensionInsertAsSiblingAppendPatch : PrefabExtensionInsertAsSiblingPatch { public override string Id => \"InsertAsSiblingAppend\"; public override InsertType Type => InsertType.Append; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertAsSiblingAppendPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"InsertAsSiblingAppend\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of inserting XML before a specific element: [PrefabExtension(\"InsertAsSiblingPrepend\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='InsertAsSibling']\")] internal class TestPrefabExtensionInsertAsSiblingPrependPatch : PrefabExtensionInsertAsSiblingPatch { public override string Id => \"InsertAsSiblingPrepend\"; public override InsertType Type => InsertType.Prepend; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertAsSiblingPrependPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"InsertAsSiblingPrepend\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } In order to add data to the prefab, you need to add properties to the target datasource class, this is done by making a mixin class, inheriting from BaseViewModelMixin<T> and marking it with ViewModelMixin attribute. This class will be mixed in to the target view model T , making fields and methods accessible in the prefab: [ViewModelMixin] public class OptionsVMMixin : BaseViewModelMixin<OptionsVM> { private readonly ModOptionsVM _modOptions; [DataSourceProperty] public ModOptionsVM ModOptions { get { return _modOptions; } } public OptionsVMMixin(OptionsVM vm) : base(vm) { _modOptions = new ModOptionsVM(); } [DataSourceMethod] public void ExecuteCloseOptions() { ModOptions.ExecuteCancelInternal(false); ViewModel?.ExecuteCloseOptions(); } } The last thing is to call UIExtender.Register and UIExtender.Enable to apply your extensions: public class CustomSubModule : MBSubModuleBase { protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); _extender = new UIExtender(\"ModuleName\"); _extender.Register(typeof(CustomSubModule).Assembly); _extender.Enable(); } } Examples Bannerlord.MBOptionScreen Yet Another Party Organiser"
  }
}